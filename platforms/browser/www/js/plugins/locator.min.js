angular.module("locator", []),
angular.module("locator").directive("locationLookup", [function() {
    return {
        restrict: "E",
        require: "?ngModel",
        templateUrl: "location-lookup/location-lookup.html",
        scope: {},
        link: function(e, o, t, n) {
            e.limitTo = e.$eval(t.limitTo) || 25, e.callback = e.$eval(t.callback), e.results = [];
            var a = document.createElement("div");
            a.setAttribute("id", e.ID);
            var r = new google.maps.places.PlacesService(o[0].appendChild(a));
            e.clear = function(text, o) {
                n.$setViewValue({name: 'Hi', description: 'Hey'}), e.callback && e.callback({name: 'Hi', description: 'Hey'});
                e.results = [];
            }, e.pickLocation = function(o) {
                e.clear();
                r.getDetails({
                    reference: o.reference
                }, function(t) {
                    e.$apply(function() {
                        var a = {
                            name: o.terms[0].value,
                            description: o.description,
                            latitude: t.geometry.location.lat(),
                            longitude: t.geometry.location.lng()
                        };
                        o.relInput.val(o.description);
                        
                        var postCode = null;
                        var town = null;
                        
                        var atrAdd = t.adr_address;
                        if (t.adr_address.indexOf("<") != 0) {
                            atrAdd = atrAdd.substr(t.adr_address.indexOf("<"), t.adr_address.length);
                        }
                        $(atrAdd).each(function () {
                            var innerH = $(this)[0].innerHTML;
                            var postCodeRegex = /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i;
                            var postCodeTest = postCodeRegex.test(innerH);
                            var townArray = ['Bedford', 'Luton', 'Northampton', 'Milton Keynes'];
                            var townTest = townArray.indexOf(innerH) != -1;
                            if (postCodeTest) {
                                postCode = innerH;
                            }
                            else if (townTest) {
                                town = innerH;
                            }
                        });
                        
                        if (o.relInput.attr("id") == 'pickup-input') {
                            $('#pickup-address-line-1').val($(atrAdd)[0].innerHTML);
                            $('#pickup-town').val(town);
                            if (t != null) {
                                $('#pickup-postcode').val(postCode);
                            }
                        } else if (o.relInput.attr("id") == 'dropoff-input') {
                        console.log($(atrAdd).length);
                            $('#dropoff-address-line-1').val($(atrAdd)[0].innerHTML);
                            $('#dropoff-town').val(town);
                            if (t != null) {
                                $('#dropoff-postcode').val(postCode);
                            }
                        }
                
                        n.$setViewValue(a), e.callback && e.callback(a)
                    })
                })
            }
        }
    }
}]),
angular.module("locator").directive("locationPredictions", ["$rootScope", function($rootScope) {
    return {
        restrict: "AE",
        scope: {
            results: "="
        },
        template: '<input type="text">',
        link: function(e, o) {
            console.log($(o).parents('location-lookup')[0].id, "ko");
            var n = angular.element(o.find("input"));
            var inputType = "dropoff-input";
            if ($(o).parents('location-lookup')[0].id == 'dropoff-location-input') {
                n.attr("id", "dropoff-input");
                n.attr("placeholder", "Drop-Off Location");
                $(o).parents('location-lookup').find('ul').addClass("dropoff-list");
            } else if ($(o).parents('location-lookup')[0].id == 'pickup-location-input') {
                inputType = "pickup-input";
                n.attr("id", "pickup-input");
                n.attr("placeholder", "Pick-Up Location");
                $(o).parents('location-lookup').find('ul').addClass("pickup-list");
            }
            
            var _id = $(o).parents('location-lookup'),
                t = new google.maps.places.AutocompleteService,
                a = function(e) {
                    var myLatLng = new google.maps.LatLng({lat: 52.03, lng: -0.47});
                    t.getPlacePredictions({
                        input: e,
                        componentRestrictions: {country: 'gb'},
                        location: myLatLng,
                        radius: 5
                    }, r)
                },
                r = function(o, t) {
                    return t !== google.maps.places.PlacesServiceStatus.OK ? (e.$apply(function() {
                        e.results = []
                        //No results were found, and the user kept the input,
                        //so we must apply the input val manually
                        var postCodeFirstRegex = /^[A-Z]{1,2}[0-9]{1,2}$/i;
                        var postCodeSecondRegex = /^[0-9][A-Z]{2}$/i;
                        var postCodeWholeRegex = /^[A-Z]{1,2}[0-9]{1,2}[0-9][A-Z]{2}$/i;
                        var inputArray = n[0].value.split(' ');
                        var postCodeTestPassed = false;
                        
                        for (var a = 0; a < inputArray.length; a++) {
                            postCodeFirstTest = postCodeFirstRegex.test(inputArray[a]);
                            postCodeWholeTest = postCodeWholeRegex.test(inputArray[a]);
                            
                            if (postCodeWholeTest && inputType == "pickup-input") {
                                $('#pickup-postcode').val(inputArray[a]);
                                postCodeTestPassed = true;
                            }
                            else if (postCodeWholeTest && inputType == "dropoff-input") {
                                $('#dropoff-postcode').val(inputArray[a]);
                                postCodeTestPassed = true;
                            }
                            else if (postCodeFirstTest && a < inputArray.length - 1) {
                                postCodeSecondTest = postCodeSecondRegex.test(inputArray[a+1]);
                                if (postCodeSecondTest) {
                                    if (inputType == "pickup-input") {
                                        $('#dropoff-postcode').val(inputArray[a] + ' ' + inputArray[a + 1]);
                                    }
                                    else if (inputType == "dropoff-input") {
                                        $('#dropoff-postcode').val(inputArray[a] + ' ' + inputArray[a + 1]);
                                    }
                                    postCodeTestPassed = true;
                                }
                            }
                            
                            if (a == inputArray.length - 1) {
                                if (inputType == "pickup-input") {
                                    $('#pickup-address-line-1').val("");
                                } else {
                                    $('#dropoff-address-line-1').val("");
                                }
                                
                                if (!postCodeTestPassed && inputType == "pickup-input") {
                                    $('#pickup-postcode').val('');
                                }
                                else if (!postCodeTestPassed && inputType == "dropoff-input") {
                                    $('#dropoff-postcode').val('');
                                }
                                if (inputType == "pickup-input") {
                                    $('#pickup-town').val('');
                                }
                                else if (inputType == "dropoff-input") {
                                    $('#dropoff-town').val('');
                                }
                                $rootScope.$broadcast('no-taxi-search-results', {'inputType': inputType});
                            }
                        }
                    }), void 0) : (e.$apply(function() {
                        $rootScope.$broadcast('taxi-search-results', {'inputType': inputType});
            
                        var alterObject = function(objIndex) {
                            var adiv = document.createElement("div");
                            adiv.setAttribute("id", "adiv");
                            
                            second = document.getElementById('undefined').appendChild(adiv);
                            console.log('end');
                            var k = new google.maps.places.PlacesService(second);
                            o[objIndex].description = o[objIndex].description.replace(', United Kingdom', '');
                            o[objIndex].description = o[objIndex].description.replace('United Kingdom', '');
                            o[objIndex].relInput = n;
                            
                            k.getDetails({
                                reference: o[objIndex].reference
                            }, function(t) {
                            
                                if (t != null) {
                                    var atrAdd = t.adr_address;
                                    if (t.adr_address.indexOf("<") != 0) {
                                        atrAdd = atrAdd.substr(t.adr_address.indexOf("<"), t.adr_address.length);
                                    }
                                    $(atrAdd).each(function (index) {
                                        /* Go Through each HTML attribute to get a control of how it displays */
                                        var innerH = $(this)[0].innerHTML;
                                        var postCodeRegex = /^[A-Z]{1,2}[0-9]{1,2} ?[0-9][A-Z]{2}$/i;
                                        var postCodeTest = postCodeRegex.test(innerH);
                                        var townArray = ['Bedford', 'Luton', 'Northampton', 'Milton Keynes'];
                                        var townTest = townArray.indexOf(innerH) == -1;
                                        
                                        if (postCodeTest) {
                                            o[objIndex].description += ', ' + innerH;
                                        }
                                        else if (townTest) {
                                            town = innerH;
                                        }
                                        
                                        if (index == $(atrAdd).length - 1) {
                                            if (objIndex < o.length - 1) {
                                                alterObject(objIndex + 1)
                                            } else {
                                                e.results = o;
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (objIndex < o.length - 1) {
                                        alterObject(objIndex + 1)
                                    } else {
                                        e.results = o;
                                    }
                                }
                            })
                        }
                        
                        alterObject(0);
                        
                    }), void 0)
                };
                
            n.on("input", function() {
                var o = n.val().replace(/,/g, '');
                o && o.length >= 3 ? a(o) : e.$apply(function() {
                    e.results = []
                })
            })
        }
    }
}]),
angular.module("locator").directive("locationPicker", ["$log", "location", "reverseGeocoder", function(e, o, t) {
    return {
        restrict: "E",
        require: "?ngModel",
        scope: {},
        templateUrl: "location-picker/location-picker.html",
        link: function(n, a, r, i) {
            n.limitTo = n.$eval(r.limitTo) || 15, o.ready(function() {
                t.geocode(o.current).then(function(e) {
                    n.options = e
                }, e.error)
            }), n.pickLocation = function(e) {
                var e = {
                    latitude: o.current.latitude,
                    longitude: o.current.longitude,
                    name: e.address_components[0].short_name,
                    description: e.formatted_address
                };
                i.$setViewValue(e)
            }
        }
    }
}]),
angular.module("locator").factory("location", [function() {
    var e = {
            isReady: !1,
            gpsAvailable: !0
        },
        o = [];
    return e.get = function(o, t) {
        navigator.geolocation.getCurrentPosition(function(t) {
            e.gpsAvailable = !0, e.current = {
                latitude: t.coords.latitude,
                longitude: t.coords.longitude
            }, e.isReady = !0, e.onReadyTasks(), o()
        }, function(o) {
            e.gpsAvailable = !1, console.log("code: " + o.code + " message: " + o.message), t()
        })
    }, e.onReadyTasks = function() {
        for (var e = o.length - 1; e >= 0; e--) o[e]()
    }, e.ready = function(t) {
        e.isReady ? t() : o.push(t)
    }, e
}]),
angular.module("locator").factory("reverseGeocoder", ["$document", "$q", function(e, o) {
    var t = {};
    return e.ready(function() {
        t.geocoder = new google.maps.Geocoder
    }), t.geocode = function(e) {
        var n = o.defer();
        if (e) var a = new google.maps.LatLng(e.latitude, e.longitude);
        else n.reject("You need to provide LatLng");
        return t.geocoder.geocode({
            latLng: a
        }, function(e, o) {
            return o !== google.maps.GeocoderStatus.OK ? (n.reject("No locations found"), void 0) : (n.resolve(e), void 0)
        }), n.promise
    }, t
}]);
